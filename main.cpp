/*
********************************************************************************************************************************************
 * Тестовое задание: Необходимо написать программу, которая будет сортировать по возрастанию большой файл беззнаковых 32-х 
 * разрядных целых чисел. При этом: 
 * - Размер входного файла значительно больше объема доступной оперативной памяти, 
 *   которой есть всего 128 Мб. 
 * - Числа в файле записаны в бинарном виде. 
 * - Есть достаточно дискового пространства 
 *   для хранения результата сортировки в отдельном файле и для хранения промежуточных результатов. 
 * - Программа будет компилироваться при помощи g++-5.3.0 с опциями -std=c++14 -D_NDEBUG -O3 -lpthread. 
 * - Файлы будут находиться на SSD диске. На компьютере стоит многоядерный процессор. 
 * - Входной файл будет находиться в той же директории что и исполняемый файл и будет называться input. 
 *   Мы ожидаем там же увидеть отсортированный файл с именем output. 
 * - Из вашей программы должен получиться исполняемый файл, 
 *   а значит нужно чтобы в ней была функция main. 
 * - Никаких дополнительных библиотек на компьютере не установлено. (Например, нет boost). 
 * - Решение должно быть кросс-платформенным. 
 * - Входной файл менять нельзя. Рекомендации: не стоит писать свои собственные 
 *   методы сортировки, вполне подойдет std::sort. Не стоит излишне усложнять решение.
 ********************************************************************************************************************************************

author: Bezugly

*/

#include <sort_huge_file.hpp>

#include <unistd.h>

#include <iostream>
#include <fstream>

using namespace std;

int main(int argc, char* argv[])
try
{
    size_t total_memory_size = 100*1024*1024;
    if(argc == 2) total_memory_size = atoi(argv[1]);

    auto input_filename = "input";
    
    check_input_file(input_filename);  

    sort_huge_file(input_filename, "output", total_memory_size);

    return 0;
}
catch(exception const& ex)
{
    cout << "Error[main]: " << ex.what() << endl;
}
